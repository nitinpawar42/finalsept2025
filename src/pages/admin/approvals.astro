---
import AdminLayout from '../../layouts/AdminLayout.astro';

// Fetch pending resellers from the API endpoint
const response = await fetch(`${Astro.url.origin}/api/reseller-approval`);
const pendingResellers = await response.json();
---

<AdminLayout title="Reseller Approvals">
  <div class="p-6 bg-white dark:bg-gray-800 shadow-md rounded-lg">
    <h2 class="text-2xl font-bold mb-6 text-gray-800 dark:text-gray-200">Pending Reseller Approvals</h2>
    {pendingResellers.length > 0 ? (
      <div class="overflow-x-auto">
        <table class="min-w-full bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700">
          <thead class="bg-gray-100 dark:bg-gray-700">
            <tr>
              <th class="py-3 px-6 text-left text-xs font-semibold text-gray-600 dark:text-gray-300 uppercase tracking-wider">Full Name</th>
              <th class="py-3 px-6 text-left text-xs font-semibold text-gray-600 dark:text-gray-300 uppercase tracking-wider">Email</th>
              <th class="py-3 px-6 text-left text-xs font-semibold text-gray-600 dark:text-gray-300 uppercase tracking-wider">PAN</th>
              <th class="py-3 px-6 text-left text-xs font-semibold text-gray-600 dark:text-gray-300 uppercase tracking-wider">Mobile</th>
              <th class="py-3 px-6 text-center text-xs font-semibold text-gray-600 dark:text-gray-300 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
            {pendingResellers.map(reseller => (
              <tr key={reseller.id} class="hover:bg-gray-50 dark:hover:bg-gray-700">
                <td class="py-4 px-6 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-200">{reseller.resellerDetails?.fullName || 'N/A'}</td>
                <td class="py-4 px-6 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300">{reseller.email}</td>
                <td class="py-4 px-6 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300">{reseller.resellerDetails?.pan || 'N/A'}</td>
                <td class="py-4 px-6 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300">{reseller.resellerDetails?.mobile || 'N/A'}</td>
                <td class="py-4 px-6 whitespace-nowrap text-center text-sm font-medium">
                  <button class="text-green-600 hover:text-green-800 font-semibold py-1 px-3 rounded-md bg-green-100 hover:bg-green-200 dark:bg-green-900 dark:text-green-300 dark:hover:bg-green-800 transition-colors approve-btn" data-id={reseller.id}>Approve</button>
                  <button class="text-red-600 hover:text-red-800 font-semibold py-1 px-3 rounded-md bg-red-100 hover:bg-red-200 dark:bg-red-900 dark:text-red-300 dark:hover:bg-red-800 transition-colors ml-2 reject-btn" data-id={reseller.id}>Reject</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    ) : (
      <p class="text-center text-gray-500 dark:text-gray-400 py-8">No pending reseller approvals at the moment.</p>
    )}
  </div>

  <script>
    document.addEventListener('click', async (event) => {
      const target = event.target;
      const button = target.closest('.approve-btn, .reject-btn');

      if (!button) return;

      const resellerId = button.dataset.id;
      const action = button.classList.contains('approve-btn') ? 'approve' : 'reject';
      let reason = null;

      if (action === 'reject') {
        reason = prompt("Please provide a reason for rejection:");
        if (reason === null) return; // User cancelled the prompt
        if (!reason.trim()) {
            alert("Rejection reason cannot be empty.");
            return;
        }
      }

      // Disable buttons to prevent multiple clicks
      button.closest('td').querySelectorAll('button').forEach(b => b.disabled = true);

      try {
        const response = await fetch('/api/reseller-approval', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ uid: resellerId, action, reason }),
        });

        const result = await response.json();

        if (response.ok) {
          // On success, remove the row from the table
          button.closest('tr').remove();
          // Check if the table is now empty
          if (document.querySelector('tbody').children.length === 0) {
            const container = document.querySelector('.overflow-x-auto');
            container.innerHTML = `<p class="text-center text-gray-500 dark:text-gray-400 py-8">No pending reseller approvals at the moment.</p>`;
          }
        } else {
          alert(`Error: ${result.message}`);
          // Re-enable buttons on failure
          button.closest('td').querySelectorAll('button').forEach(b => b.disabled = false);
        }
      } catch (error) {
        console.error('Failed to process reseller action:', error);
        alert('An error occurred. Please check the console and try again.');
        // Re-enable buttons on error
        button.closest('td').querySelectorAll('button').forEach(b => b.disabled = false);
      }
    });
  </script>
</AdminLayout>
