---
import ResellerLayout from '../../layouts/ResellerLayout.astro';
---

<ResellerLayout title="Dashboard">
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    <div class="lg:col-span-2">
      <div class="bg-white dark:bg-gray-800 shadow-md rounded-lg p-6">
        <h2 class="text-2xl font-bold mb-4 text-gray-800 dark:text-gray-200">Available Products</h2>
        <div id="product-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <!-- Products will be loaded here -->
        </div>
      </div>
    </div>
    <div>
      <div class="bg-white dark:bg-gray-800 shadow-md rounded-lg p-6">
        <h2 class="text-2xl font-bold mb-4 text-gray-800 dark:text-gray-200">My Customers</h2>
        <ul id="customer-list" class="divide-y divide-gray-200 dark:divide-gray-700"></ul>
        <h3 class="text-xl font-bold mt-6 mb-4 text-gray-800 dark:text-gray-200">Add New Customer</h3>
        <form id="add-customer-form">
          <div class="input-group mb-4">
            <label for="customer-name" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Name</label>
            <input type="text" id="customer-name" name="customer-name" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-gray-200" required>
          </div>
          <div class="input-group mb-4">
            <label for="customer-email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Email</label>
            <input type="email" id="customer-email" name="customer-email" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-gray-200" required>
          </div>
          <div class="input-group mb-4">
            <label for="customer-mobile" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Mobile</label>
            <input type="text" id="customer-mobile" name="customer-mobile" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-gray-200" required>
          </div>
           <div class="input-group mb-4">
            <label for="customer-address" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Address</label>
            <input type="text" id="customer-address" name="customer-address" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-gray-200" required>
          </div>
          <button type="submit" class="w-full bg-green-500 text-white font-bold py-2 px-4 rounded-lg hover:bg-green-700">Add Customer</button>
        </form>
      </div>
    </div>
  </div>
  <script>
    import { db, auth } from '../../firebase/client.js';
    import { collection, getDocs, addDoc, query, where } from 'firebase/firestore';

    const customerList = document.getElementById('customer-list');
    const addCustomerForm = document.getElementById('add-customer-form');
    const productList = document.getElementById('product-list');
    let userId = null;

    async function fetchAndRenderProducts() {
      const productsSnapshot = await getDocs(collection(db, "products"));
      let productHTML = '';
      productsSnapshot.forEach(doc => {
        const product = { id: doc.id, ...doc.data() };
        productHTML += `
          <div class="bg-gray-100 dark:bg-gray-700 rounded-lg shadow-md p-4">
            <img src="${product.imageUrl}" alt="${product.name}" class="w-full h-48 object-cover rounded-t-lg mb-4">
            <h3 class="text-lg font-bold text-gray-800 dark:text-gray-200">${product.name}</h3>
            <p class="text-gray-600 dark:text-gray-400">â‚¹${product.price}</p>
            <button class="w-full bg-blue-500 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700 mt-2" onclick="addToCart('${product.id}')">Add to Cart</button>
          </div>
        `;
      });
      productList.innerHTML = productHTML;
    }

    auth.onAuthStateChanged(async (user) => {
      if (user) {
        userId = user.uid;
        const resellerId = user.uid;
        const q = query(collection(db, "customers"), where("resellerId", "==", resellerId));
        const querySnapshot = await getDocs(q);
        querySnapshot.forEach((doc) => {
          const customer = doc.data();
          const listItem = document.createElement('li');
          listItem.className = 'py-3 flex justify-between items-center';
          listItem.innerHTML = `<span class="text-gray-800 dark:text-gray-200">${customer.name}</span>`;
          customerList.appendChild(listItem);
        });

        addCustomerForm.addEventListener('submit', async (e) => {
          e.preventDefault();
          const name = addCustomerForm['customer-name'].value;
          const email = addCustomerForm['customer-email'].value;
          const mobile = addCustomerForm['customer-mobile'].value;
          const address = addCustomerForm['customer-address'].value;

          await addDoc(collection(db, "customers"), {
            name,
            email,
            mobile,
            address,
            resellerId: resellerId
          });

          addCustomerForm.reset();
          location.reload();
        });
        
        fetchAndRenderProducts();

      } else {
        window.location.href = '/login';
      }
    });

    window.addToCart = async function(productId) {
      if (!userId) {
        alert('Please log in to add items to your cart.');
        return;
      }
      await fetch('/api/cart/add', {
        method: 'POST', 
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ productId, quantity: 1, userId })
      });
      alert('Product added to cart!');
    }
  </script>
</ResellerLayout>