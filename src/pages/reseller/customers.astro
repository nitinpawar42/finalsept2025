---
import ResellerLayout from '../../layouts/ResellerLayout.astro';
import { db } from '../../firebase/admin';
import { getAuth } from "firebase-admin/auth";

const auth = getAuth();
const sessionCookie = Astro.cookies.get("session").value;
const decodedClaims = await auth.verifySessionCookie(sessionCookie, true);
const resellerId = decodedClaims.uid;

const customersRef = db.collection('customers').where('resellerId', '==', resellerId);
const customersSnapshot = await customersRef.get();
const customers = customersSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
---

<ResellerLayout title="Manage Customers">
  <div class="container mx-auto">
    <h1 class="text-2xl font-bold mb-6">Manage Customers</h1>

    <!-- Add Customer Form -->
    <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md mb-8">
      <h2 class="text-xl font-bold mb-4">Add New Customer</h2>
      <form id="add-customer-form">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <input type="text" name="name" placeholder="Customer Name" class="w-full px-3 py-2 border rounded-lg" required>
          <input type="email" name="email" placeholder="Email" class="w-full px-3 py-2 border rounded-lg" required>
          <input type="tel" name="phone" placeholder="Phone" class="w-full px-3 py-2 border rounded-lg" required>
          <textarea name="address" placeholder="Address" class="w-full px-3 py-2 border rounded-lg md:col-span-2" required></textarea>
        </div>
        <button type="submit" class="mt-4 w-full bg-indigo-500 text-white font-bold py-2 px-4 rounded-lg hover:bg-indigo-700">Add Customer</button>
      </form>
    </div>

    <!-- Customer List -->
    <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
      <h2 class="text-xl font-bold mb-4">My Customers</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {customers.map(customer => (
          <div class="border rounded-lg p-4">
            <h3 class="text-lg font-bold">{customer.name}</h3>
            <p class="text-gray-600 dark:text-gray-400">{customer.email}</p>
            <p class="text-gray-600 dark:text-gray-400">{customer.phone}</p>
            <p class="text-sm mt-2">{customer.address}</p>
            <div class="mt-4 flex justify-end">
              <a href={`/reseller/customers/edit/${customer.id}`} class="text-indigo-500 hover:underline">Edit</a>
              <button class="delete-customer-btn text-red-500 hover:underline ml-4" data-id={customer.id}>Delete</button>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>

  <script>
    document.getElementById('add-customer-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      const form = e.target as HTMLFormElement;
      const formData = new FormData(form);

      const response = await fetch('/api/customers', {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        window.location.reload();
      } else {
        const error = await response.json();
        alert(`Error: ${error.message}`);
      }
    });

    document.querySelectorAll('.delete-customer-btn').forEach(button => {
        button.addEventListener('click', async (e) => {
        const id = (e.target as HTMLElement).dataset.id;
        if (confirm('Are you sure you want to delete this customer?')) {
          const response = await fetch(`/api/customers?id=${id}`, {
            method: 'DELETE',
          });

          if (response.ok) {
            window.location.reload();
          } else {
            const error = await response.json();
            alert(`Error: ${error.message}`);
          }
        }
      });
    });
  </script>
</ResellerLayout>
